package com.zzia.wngn.design.interpreter;

/**
 * @author wanggang
 * @title 节点
 * @date 2016/5/30 21:11
 * @email wanggang@vfou.com
 * @descripe <p>
 * 意图<br>
 * 给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。<br>
 * <p/>
 * 优点<br>
 * 1、 可扩展性比较好，灵活。<br>
 * 2、 增加了新的解释表达式的方式。<br>
 * 3、 易于实现文法。<br>
 * <p/>
 * 缺点<br>
 * 1、 执行效率比较低，可利用场景比较少。<br>
 * 2、 对于复杂的文法比较难维护。<br>
 * <p/>
 * 模式适用场景<br>
 * 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。<br>
 * 2、一些重复出现的问题可以用一种简单的语言来进行表达。<br>
 * 3、文法较为简单。<br>
 * <p/>
 * 模式总结<br>
 * 1、在解释器模式中由于语法是由很多类表示的，所以可扩展性强。<br>
 * 2、虽然解释器的可扩展性强，但是如果语法规则的数目太大的时候，该模式可能就会变得异常复杂。所以解释器模式适用于文法较为简单的。<br>
 * 3、解释器模式可以处理脚本语言和编程语言。常用于解决某一特定类型的问题频繁发生情况。<br>
 */
public interface Node {

    /**
     * 执行
     */
    public int interpret();

}
