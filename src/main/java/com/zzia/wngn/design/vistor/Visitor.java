package com.zzia.wngn.design.vistor;

/**
 * @author wanggang
 * @title 抽象访问者角色
 * @date 2016年5月19日 下午5:03:03
 * @email wanggang@vfou.com
 * @descripe 为该对象结构中具体元素角色声明一个访问操作接口，操作接口的名字和参数标识了发送访问请求给具休访问者的具休元素角色，这样访问者就可以通过该元素角色的特定接口直接访问它。
 * <p>
 * 访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。
 * 访问者模式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化，
 * 经常有新的数据对象增加进来，则不适合使用访问者模式。访问者模式的优点是增加操作很容易，因为增加操作意味着增加新的访问者。
 * 访问者模式将有关行为集中到一个访问者对象中，其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。
 * <p>
 * 简单来说，访问者模式就是一种分离对象数据结构与行为的方法，通过这种分离，可达到为一个被访问者动态添加新的操作而无需做其它的修改的效果。
 * <p>
 * 该模式适用场景：如果我们想为一个现有的类增加新功能，不得不考虑几个事情：<br>
 * 1、新功能会不会与现有功能出现兼容性问题？<br>
 * 2、以后会不会再需要添加？<br>
 * 3、如果类不允许修改代码怎么办？<br>
 * 面对这些问题，最好的解决方法就是使用访问者模式，访问者模式适用于数据结构相对稳定的系统，把数据结构和算法解耦，
 */
public interface Visitor {

    public int visit(Book book);

    public int visit(Fruit book);

}
